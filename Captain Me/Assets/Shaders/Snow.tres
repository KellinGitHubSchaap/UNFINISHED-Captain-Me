[gd_resource type="VisualShader" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "texture"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=4]
period = 42.5
persistence = 0.542

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = SubResource( 5 )

[sub_resource type="Gradient" id=7]
offsets = PoolRealArray( 0, 0.666667 )
colors = PoolColorArray( 0.4, 0.4, 0.4, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 7 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = SubResource( 8 )

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="Gradient" id=11]
colors = PoolColorArray( 0.253906, 0.253906, 0.253906, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = SubResource( 12 )

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
uniform_name = "heightmap"

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=16]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D heightmap;
uniform sampler2D texture;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_5;



void vertex() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(heightmap, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:3
	vec3 n_in3p1 = vec3(0.00000, 1.00000, 0.00000);
	vec3 n_out3p0 = n_out2p0 * n_in3p1;

// Input:5
	vec3 n_out5p0 = VERTEX;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 + n_out5p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(texture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:6
	vec3 n_in6p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out6p0 = n_out2p0 * n_in6p1;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out6p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, n_out4p0.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:3
	vec3 n_out3p0 = n_out7p0 * n_out5p0;

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -134.752, 53.525 )
nodes/vertex/0/position = Vector2( 680, 80 )
nodes/vertex/2/node = SubResource( 14 )
nodes/vertex/2/position = Vector2( 80, 80 )
nodes/vertex/3/node = SubResource( 15 )
nodes/vertex/3/position = Vector2( 300, 100 )
nodes/vertex/4/node = SubResource( 16 )
nodes/vertex/4/position = Vector2( 480, 140 )
nodes/vertex/5/node = SubResource( 17 )
nodes/vertex/5/position = Vector2( 320, 240 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 560, 180 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -340, 20 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 313.313, 207.029 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( -140, 280 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 100, 320 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( -80, 140 )
nodes/fragment/7/node = SubResource( 13 )
nodes/fragment/7/position = Vector2( 100, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 1, 2, 0, 6, 0, 6, 0, 7, 0, 7, 0, 3, 0 )
